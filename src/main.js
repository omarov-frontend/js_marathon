import Pokemon from './pokemon.js';
import random from './utils.js';

const $control = document.querySelector('.control');
const $logs = document.querySelector('#logs');

// –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function renderStartBtn(name) {
    $control.innerHTML = '';
    const $startBtn = document.createElement('button');
    $startBtn.classList.add('button');
    $startBtn.innerText = name;
    $startBtn.addEventListener('click', startGame);
    $control.appendChild($startBtn);
}

function startGame() {
    $logs.innerHTML = '';
    $control.innerHTML = '';
    game.start();
}

function counter(count = 0) {
    return function() {
        return ++count;
    }
}
const newRoundCounter = counter();

// —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–º—ã–∫–∞–Ω–∏–µ
function countBtn(count = 10, el) {
    const innerText = el.innerText;
    el.innerText = `${innerText} (${count})`;
  
    return function() {
        count--;
        el.innerText = `${innerText} (${count})`;
        if(count === 0) {
            el.disabled = true;
        }
        return count;
    }
}

function generateLog(firstPerson, secondPerson, count) {

    const logs = [
        `<strong>${firstPerson.name}</strong> –≤—Å–ø–æ–º–Ω–∏–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ <strong>${secondPerson.name}</strong>, –Ω–µ –ø–æ–º–Ω—è —Å–µ–±—è –æ—Ç –∏—Å–ø—É–≥–∞, —É–¥–∞—Ä–∏–ª –≤ –ø—Ä–µ–¥–ø–ª–µ—á—å–µ –≤—Ä–∞–≥–∞. <br> –ù–∞–Ω–µ—Å - ‚ö°Ô∏è<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –ø–æ–ø–µ—Ä—Ö–Ω—É–ª—Å—è, –∏ –∑–∞ —ç—Ç–æ <strong>${secondPerson.name}</strong> —Å –∏—Å–ø—É–≥—É –ø—Ä–∏–ª–æ–∂–∏–ª –ø—Ä—è–º–æ–π —É–¥–∞—Ä –∫–æ–ª–µ–Ω–æ–º –≤ –ª–æ–± –≤—Ä–∞–≥–∞. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –∑–∞–±—ã–ª—Å—è, –Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞–≥–ª—ã–π <strong>${secondPerson.name}</strong>, –ø—Ä–∏–Ω—è–≤ –≤–æ–ª–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ—Å–ª—ã—à–Ω–æ –ø–æ–¥–æ–π–¥—è —Å–∑–∞–¥–∏, —É–¥–∞—Ä–∏–ª. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –ø—Ä–∏—à–µ–ª –≤ —Å–µ–±—è, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ <strong>${secondPerson.name}</strong> —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–Ω–µ—Å –º–æ—â–Ω–µ–π—à–∏–π —É–¥–∞—Ä. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –ø–æ–ø–µ—Ä—Ö–Ω—É–ª—Å—è, –Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è <strong>${secondPerson.name}</strong> –Ω–µ—Ö–æ—Ç—è —Ä–∞–∑–¥—Ä–æ–±–∏–ª –∫—É–ª–∞–∫–æ–º \<–≤—ã—Ä–µ–∑–∞–Ω–Ω–æ —Ü–µ–Ω–∑—É—Ä–æ–π\> –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> —É–¥–∏–≤–∏–ª—Å—è, –∞ <strong>${secondPerson.name}</strong> –ø–æ—à–∞—Ç–Ω—É–≤—à–∏—Å—å –≤–ª–µ–ø–∏–ª –ø–æ–¥–ª—ã–π —É–¥–∞—Ä. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –≤—ã—Å–º–æ—Ä–∫–∞–ª—Å—è, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ <strong>${secondPerson.name}</strong> –ø—Ä–æ–≤–µ–ª –¥—Ä–æ–±—è—â–∏–π —É–¥–∞—Ä. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –ø–æ—à–∞—Ç–Ω—É–ª—Å—è, –∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞–≥–ª—ã–π <strong>${secondPerson.name}</strong> –±–µ—Å–ø—Ä–∏—á–∏–Ω–Ω–æ —É–¥–∞—Ä–∏–ª –≤ –Ω–æ–≥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è, –∫–∞–∫ –≤–¥—Ä—É–≥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ <strong>${secondPerson.name}</strong> —Å–ª—É—á–∞–π–Ω–æ –≤–ª–µ–ø–∏–ª —Å—Ç–æ–ø–æ–π –≤ –∂–∏–≤–æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
        `<strong>${firstPerson.name}</strong> –ø—ã—Ç–∞–ª—Å—è —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ –≤–¥—Ä—É–≥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ <strong>${secondPerson.name}</strong> —Å–æ —Å–∫—É–∫–∏, —Ä–∞–∑–±–∏–ª –±—Ä–æ–≤—å —Å–æ–ø–µ—Ä–Ω–∏–∫—É. <br> –ù–∞–Ω–µ—Å - ‚ö°<span class='text-red'>${count}</span> —É—Ä–æ–Ω–∞, –û—Å—Ç–∞–≤–∏–≤ - <span class='text-green'>${firstPerson.hp.current} –∏–∑ ${firstPerson.hp.default}</span> –∂–∏–∑–Ω–µ–π!`,
    ];

    return logs[ random(logs.length) - 1 ];
}


class Game {
    player1;
    player2;

    getRandomPokemon = async () => {
        const res = await fetch('https://reactmarathon-api.netlify.app/api/pokemons?random=true');
        const body = await res.json();
    
        return body;
    }

    getKick = async (player1id, player2id, attackId) => {
        const res = await fetch(`https://reactmarathon-api.netlify.app/api/fight?player1id=${player1id}&attackId=${attackId}&player2id=${player2id}`);
        const body = await res.json();
    
        return body;
    }

    fightLog = async (count, player) => {
        const $paragraph = document.createElement('p');
        let log;
        let $buttons = document.querySelectorAll('.button');
      
        if (player.hp.current === 0) {
            $buttons.forEach(item => item.disabled = true);
            renderStartBtn('Restart Game!');
            log = player === this.player2 ? `Round ${newRoundCounter()}<hr>${generateLog(player, this.player1, count)}<br><strong>${this.player1.name}</strong> - –í—ã–∏–≥—Ä–∞–ª!üèÜ<br><strong>${player.name}</strong> - –ü—Ä–æ–∏–≥—Ä–∞–ª!üò¢`
            : `${generateLog(player, this.player2, count)}<br><strong>${this.player2.name}</strong> - –í—ã–∏–≥—Ä–∞–ª!üèÜ<br><strong>${player.name}</strong> - –ü—Ä–æ–∏–≥—Ä–∞–ª!üò¢<hr>`;
        } else {
            log = player === this.player2
                ? `Round ${newRoundCounter()}<hr>${generateLog(player, this.player1, count)}`
                : `${generateLog(player, this.player2, count)}<hr>`;
        }
        $paragraph.innerHTML = `${ log }`;
        $logs.insertBefore($paragraph, $logs.children[0]);
    }

    start = async () => {
        this.player1 = new Pokemon({
            ...(await this.getRandomPokemon()),
            selectors: 'player1',
        });

        this.player2 = new Pokemon({
            ...(await this.getRandomPokemon()),
            selectors: 'player2',
        });

        this.player1.renderPlayer();
        this.player2.renderPlayer();

        this.player1.attacks.forEach(attack => {
            const $btn = document.createElement('button');
            $btn.classList.add('button');
            $control.appendChild($btn);
            $btn.innerText = attack.name;
      
            const btnCount = countBtn(attack.maxCount, $btn);
      
            $btn.addEventListener('click', async () => {
                const count = await this.getKick(this.player1.id, this.player2.id, attack.id);
                btnCount();
                this.player1.changeHp(count.kick.player1, this.player1, this.fightLog);
                this.player2.changeHp(count.kick.player2, this.player2, this.fightLog);
            })
            $control.appendChild($btn);
        })
    }
}

const game = new Game();

renderStartBtn('Start Game!');